"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[688],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(n),d=r,m=c["".concat(i,".").concat(d)]||c[d]||h[d]||p;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,o=new Array(p);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<p;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>p,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const p={id:"quant_phpstan",title:"PHPStan",slug:"/packages/quant/phpstan"},o="quant/phpstan",s={unversionedId:"packages/quant/quant_phpstan",id:"packages/quant/quant_phpstan",title:"PHPStan",description:"phpstan extensions for quant.",source:"@site/docs/packages/quant/phpstan.md",sourceDirName:"packages/quant",slug:"/packages/quant/phpstan",permalink:"/docs/packages/quant/phpstan",draft:!1,editUrl:"https://github.com/quant-php/quant.github.io/tree/main/docs/packages/quant/phpstan.md",tags:[],version:"current",lastUpdatedBy:"Thorsten Suckow-Homberg",lastUpdatedAt:1684512817,formattedLastUpdatedAt:"May 19, 2023",frontMatter:{id:"quant_phpstan",title:"PHPStan",slug:"/packages/quant/phpstan"},sidebar:"docs",previous:{title:"Core",permalink:"/docs/packages/quant/core"}},i={},l=[{value:"Installation",id:"installation",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Resources",id:"resources",level:2}],u={toc:l},c="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quantphpstan"},(0,r.kt)("inlineCode",{parentName:"h1"},"quant/phpstan")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://phpstan.org/"},"phpstan")," extensions for ",(0,r.kt)("strong",{parentName:"p"},"quant"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"The extension is already available with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/quant-php/quant"},"quant/quant"),"."),(0,r.kt)("p",null,"To register this extension with your project, use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ composer require --dev phpstan/extension-installer && \\\n  composer require --dev quant/phpstan\n")),(0,r.kt)("p",null,"This should automatically register the extension with your ",(0,r.kt)("strong",{parentName:"p"},"phpstan")," installation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-neon"},"includes:\n    - vendor/quant/phpstan\n")),(0,r.kt)("h2",{id:"documentation"},"Documentation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"quant/phpstan")," provides support for properly analysing classes that use ",(0,r.kt)("inlineCode",{parentName:"p"},"getter")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"setter")," automation with the help\nof ",(0,r.kt)("a",{parentName:"p",href:"core#1-automated-gettersetter-creation"},(0,r.kt)("strong",{parentName:"a"},"Quant","\\","Core","\\","Trait","\\","AccessorTrait")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"\n#[Getter]\n#[Setter(Modifier::PROTECTED)]\nclass A\n{\n    private string $value;\n}\n")),(0,r.kt)("p",null,"will register with availability of ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@method A setValue(string $value)\n@method string getValue() \n")),(0,r.kt)("p",null,"Modifiers are considered: ",(0,r.kt)("inlineCode",{parentName:"p"},"setValue()")," will be registered with ",(0,r.kt)("inlineCode",{parentName:"p"},"protected")," access in this case."),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/quant-php/quant/issues"},"Report issues")," and\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/quant-php/quant/pulls"},"send Pull Requests"),"\nin the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/quant-php/quant"},"main quant repository"))))}h.isMDXComponent=!0}}]);