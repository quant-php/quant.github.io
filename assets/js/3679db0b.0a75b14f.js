"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[610],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),p=c(n),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,s(s({ref:e},u),{},{components:n})):r.createElement(f,s({ref:e},u))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o[p]="string"==typeof t?t:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8183:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={id:"abstractlist",title:"AbstractList",slug:"/packages/quant/core/abstractlist"},s=void 0,o={unversionedId:"packages/quant/core/abstractlist",id:"packages/quant/core/abstractlist",title:"AbstractList",description:"Reference",source:"@site/docs/packages/quant/core/AbstractList.md",sourceDirName:"packages/quant/core",slug:"/packages/quant/core/abstractlist",permalink:"/docs/packages/quant/core/abstractlist",draft:!1,editUrl:"https://github.com/quant-php/quant.github.io/tree/main/docs/packages/quant/core/AbstractList.md",tags:[],version:"current",lastUpdatedBy:"Thorsten Suckow-Homberg",lastUpdatedAt:1685382797,formattedLastUpdatedAt:"May 29, 2023",frontMatter:{id:"abstractlist",title:"AbstractList",slug:"/packages/quant/core/abstractlist"}},l={},c=[{value:"Definition",id:"definition",level:2},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Methods",id:"methods",level:2}],u={toc:c},p="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Reference"),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("p",null,"Namespace: ",(0,a.kt)("inlineCode",{parentName:"p"},"Quant\\Core")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AbstractList")," Represents a strongly typed list with methods for manipulating and searching."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"class AbstractList<T>: \\Quant\\Core\\Contract\\Arrayable, \n                       \\Quant\\Core\\Contract\\Equatable, \n                       \\ArrayAccess<int, T>, \n                       \\Iterator<int, T>, \n                       \\Countable\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'\n#[Getter] #[Setter]\nclass Entity \n{   \n    use AccessorTrait;\n\n    public function __construct(private string $value)\n    {\n    }\n}\n\nclass EntityList extends AbstractList {\n    \n    public function getType(): string\n    {\n        return Entity::class;\n    }\n    \n    protected function compareItems(mixed $a, mixed $b): bool\n    {\n        if (!($a instanceof Entity) && !($b instanceof Entity)) {\n            return false;\n        }\n        \n        return $a->getValue() === $b->getValue();\n    }\n    \n}\n\n$listA = new EntityList();\n$listA[] = new Entity("1");\n$listA[] = new Entity("1");\n\n$listB = new EntityList();\n$listB[] = new Entity("1");\n$listB[] = new Entity("2");\n\n$listA->equals($listB); // false\n\n$listC = EntityList::make(new Entity("3"), new Entity("4"));\n\n$listC->map(fn(Entity $item): Entity => $item->setValue("1"))->equals($listA); // true\n\n$listB->peek()->getValue(); // "2"\n\n$listC->findBy(fn (Entity $item): bool => $item->getValue() === "a"); //null\n$listC->findBy(fn (Entity $item): bool => $item->getValue() !== "a")->toArray(); //[listC[0], listC[1]]\n')),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("h2",{id:"methods"},"Methods"))}m.isMDXComponent=!0}}]);