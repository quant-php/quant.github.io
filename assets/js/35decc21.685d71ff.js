"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[490],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1045:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"accessortrait",title:"AccessorTrait",slug:"/packages/quant/core/trait/accessortrait"},o=void 0,s={unversionedId:"packages/quant/core/trait/accessortrait",id:"packages/quant/core/trait/accessortrait",title:"AccessorTrait",description:"Reference",source:"@site/docs/packages/quant/core/trait/AccessorTrait.md",sourceDirName:"packages/quant/core/trait",slug:"/packages/quant/core/trait/accessortrait",permalink:"/docs/packages/quant/core/trait/accessortrait",draft:!1,editUrl:"https://github.com/quant-php/quant.github.io/tree/main/docs/packages/quant/core/trait/AccessorTrait.md",tags:[],version:"current",lastUpdatedBy:"Thorsten Suckow-Homberg",lastUpdatedAt:1685309836,formattedLastUpdatedAt:"May 28, 2023",frontMatter:{id:"accessortrait",title:"AccessorTrait",slug:"/packages/quant/core/trait/accessortrait"},sidebar:"docs",previous:{title:"Equatable",permalink:"/docs/packages/quant/core/contract/equatable"},next:{title:"PHPStan",permalink:"/docs/packages/quant/phpstan"}},l={},p=[{value:"Definition",id:"definition",level:2},{value:"Example",id:"example",level:2},{value:"Getter/Setter automation",id:"gettersetter-automation",level:2},{value:"<code>#[Getter]</code> and <code>#[Setter]</code> Attributes",id:"getter-and-setter-attributes",level:3},{value:"Getters",id:"getters",level:4},{value:"Setters and Guards",id:"setters-and-guards",level:4},{value:"Using the guards with <code>__construct</code>",id:"using-the-guards-with-__construct",level:4},{value:"Constructor Property Promotion",id:"constructor-property-promotion",level:3},{value:"Attribute Configuration",id:"attribute-configuration",level:3},{value:"Access-level modifiers",id:"access-level-modifiers",level:4},{value:"Available modifier",id:"available-modifier",level:5},{value:"Attributes on class-level",id:"attributes-on-class-level",level:3},{value:"Remarks",id:"remarks",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Resources",id:"resources",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Reference"),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("p",null,"Namespace: ",(0,a.kt)("inlineCode",{parentName:"p"},"Quant\\Core\\Trait")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait")," provides accessor automation for object properties attributed with ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Setter]")," and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"trait AccessorTrait\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\nuse Quant\\Core\\Attribute\\Getter;\n\nclass Employee {\n\n    use AccessorTrait;\n\n    #[Setter] #[Getter]\n    private string $name = "John Smith";\n\n    public function __construct(\n        #[Getter]\n        private string $empId\n    ) {\n    }\n}\n\n$employee = new Employee("87i-dsd-89z-978");\n$employe->getEmpId(); // returns "87i-dsd-89z-978"\n$employe->setName("Thomas Anderson")->getName(); // returns "Thomas Anderson"\n')),(0,a.kt)("h2",{id:"gettersetter-automation"},"Getter/Setter automation"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In the following, the word ",(0,a.kt)("inlineCode",{parentName:"p"},"Accessor")," is used both for accessors and mutators, commonly referred to as ",(0,a.kt)("inlineCode",{parentName:"p"},"getters")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setters"),".")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Quant/Core/Trait/AccessorTrait")," provides accessors to object properties attributed with ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Setter]"),"\nand/or ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]"),"."),(0,a.kt)("h3",{id:"getter-and-setter-attributes"},(0,a.kt)("inlineCode",{parentName:"h3"},"#[Getter]")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"#[Setter]")," Attributes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=Example",title:"Example"},'use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\nuse Quant\\Core\\Attribute\\Getter;\n\nclass Target \n{\n    use AccessorTrait;\n  \n    #[Setter] #[Getter] private string $value = "";\n}\n\n$target = new Target();\n$target->setValue("new value")->getValue(); // "new value"\n')),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Setter]")," and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]")," are used, ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"is")," methods will be available with an object instance\nwhose class uses these annotations ",(0,a.kt)("em",{parentName:"p"},"(sic!)"),"."),(0,a.kt)("p",null,"Such attributes may be configured for a class or its properties and/or its constructor parameters when using ",(0,a.kt)("strong",{parentName:"p"},"constructor property promotion"),"."),(0,a.kt)("h4",{id:"getters"},"Getters"),(0,a.kt)("p",null,"Getters are available for properties using the ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]")," attribute. Except for ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),"-values, a ",(0,a.kt)("inlineCode",{parentName:"p"},"getter")," is always prefixed with\n",(0,a.kt)("inlineCode",{parentName:"p"},"get"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," values can be queried using the prefix ",(0,a.kt)("inlineCode",{parentName:"p"},"is"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=Getters",title:"Getters"},'use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Getter;\nclass Target \n{\n    use AccessorTrait;\n  \n    #[Getter] private string $value = "default";\n    #[Getter] private bool $valid = true;\n}\n\n$target = new Target();\n$target->getValue(); // "default"\n$target->isValid(); // true\n')),(0,a.kt)("h4",{id:"setters-and-guards"},"Setters and Guards"),(0,a.kt)("p",null,"The return value of a ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),"-method provided with ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait")," will always be the owning instance."),(0,a.kt)("p",null,"To use invariants with ",(0,a.kt)("inlineCode",{parentName:"p"},"setters"),", each ",(0,a.kt)("inlineCode",{parentName:"p"},"setter")," has an ",(0,a.kt)("inlineCode",{parentName:"p"},"apply"),"-method that guards the property. If implemented, its return value\nwill be used as the new value for the property. This allows for applying validation and coercion logic without accidentally\nbreaking the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait"),"'s interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Setters and Guards"',title:'"Setters',and:!0,'Guards"':!0},'use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\n\nclass Target \n{\n    use AccessorTrait;\n  \n    #[Setter] private string $value = "";\n\n    protected function applyValue(string $value): string\n    {\n        return $value === "" ? $this->value : $value;\n    }\n}\n\n$target = new Target();\n$target->setValue("new value")->setValue("")->getValue(); // "new value"\n')),(0,a.kt)("h4",{id:"using-the-guards-with-__construct"},"Using the guards with ",(0,a.kt)("inlineCode",{parentName:"h4"},"__construct")),(0,a.kt)("p",null,"If an object requires the guards to be used with ",(0,a.kt)("a",{parentName:"p",href:"#constructor-property-promotion"},"constructor arguments"),", the method ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait::applyProperties()"),"\ncan be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Calling guards with the constructor"',title:'"Calling',guards:!0,with:!0,the:!0,'constructor"':!0},'use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\n\nclass Target \n{\n    use AccessorTrait;\n    \n    public function __construct(\n        private string $a,\n        #[Setter]\n        private string $b\n    ) {\n        $this->applyProperties([1 => $b]);\n    }\n\n    protected function applyB(string $value): mixed \n    {\n        echo "Called by the constructor.";\n        return $value;\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait::applyProperties(array $args)")," configures the properties of ",(0,a.kt)("strong",{parentName:"p"},"this")," class with the values available in ",(0,a.kt)("inlineCode",{parentName:"p"},"$args"),".\nThe ordinal value of the individual entries in ",(0,a.kt)("inlineCode",{parentName:"p"},"$args")," is expected to match the ordinal value of the parameter\nthat is to be configured with the value, so it treats the arguments positionally: To use an argument\nfor ",(0,a.kt)("inlineCode",{parentName:"p"},"$b")," with the following constructor"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"__construct($a = null, $b = null)")),(0,a.kt)("p",null,"an array in the form of"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'$args = [1 => "value_of_b"]')),(0,a.kt)("p",null,"must be passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"applyProperties")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Argument inspection can be leveraged to the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait")," by applying ",(0,a.kt)("inlineCode",{parentName:"p"},"applyProperties()")," to the return value\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"func_get_args()"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$this->applyProperties(func_get_args());\n"))),(0,a.kt)("h3",{id:"constructor-property-promotion"},"Constructor Property Promotion"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait")," considers constructor parameters used with ",(0,a.kt)("strong",{parentName:"p"},"Constructor Property Promotion"),". Configuring the attributes\ndirectly on constructor parameters greatly reduces boilerplate code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Constructor Property Promotion"',title:'"Constructor',Property:!0,'Promotion"':!0},"use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\n\nclass Target \n{\n    use AccessorTrait;\n\n    public function __construct(\n         #[Setter] #[Getter]\n         public string $value,\n         #[Setter]\n         private bool $state\n     ) {\n    {\n    }\n}\n")),(0,a.kt)("h3",{id:"attribute-configuration"},"Attribute Configuration"),(0,a.kt)("h4",{id:"access-level-modifiers"},"Access-level modifiers"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Setter]")," can be configured with access-level modifiers. To do so, import the ",(0,a.kt)("inlineCode",{parentName:"p"},"Modifier"),"-enum from\nthe package ",(0,a.kt)("inlineCode",{parentName:"p"},"Quant\\Core\\Lang\\Modifer"),", and pass the required modifier as an argument to the accessor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"use Quant\\Core\\Attribute\\Setter;\nuse Quant\\Core\\Lang\\Modifier;\n\n#[Getter(Modifier::PROTECTED)]\nclass A \n{\n    // ...\n")),(0,a.kt)("p",null,"The visibility of the methods provided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait")," correspond to the particular modifier. The default\nmodifier, if none is provided, is ",(0,a.kt)("inlineCode",{parentName:"p"},"Quant\\Core\\Lang\\Modifier\\Modifier::PUBLIC"),"."),(0,a.kt)("h5",{id:"available-modifier"},"Available modifier"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"quant"),"-modifier semantically correspond to language level modifier."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Quant\\Core\\Lang\\Modifier::PRIVATE")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Quant\\Core\\Lang\\Modifier::PROTECTED")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Quant\\Core\\Lang\\Modifier::PUBLIC"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="access-level modifiers"',title:'"access-level','modifiers"':!0},'use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\nuse Quant\\Core\\Attribute\\Getter;\nuse Quant\\Core\\Lang\\Modifier;\n\nclass A \n{\n     use AccessorTrait;\n\n     public function __construct(\n          public string $value,\n          #[Getter(Modifier::PROTECTED)]\n          private bool $state,\n          #[Getter(Modifier::PRIVATE)]\n          private bool $valid\n      ) {\n     {\n     }\n     \n     public function proxyIsValid(): bool\n     {\n         return $this->isValid();\n     }\n }\n \n\nclass B extends A \n{\n    public function proxyIsState(): bool\n    {\n        return $this->isState();\n    }\n} \n\n$a = new A("value", true, false);\n$a->isValid(); // BadMethodCallException\n$a->proxyIsValid(); // false\n\n$a = new B("value", true, false);\n$b->isState(); // BadMethodCallException\n$b->proxyIsState();// true \n')),(0,a.kt)("h3",{id:"attributes-on-class-level"},"Attributes on class-level"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"#[Setter]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]")," can also be used on class-level:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="class-level setters and getters"',title:'"class-level',setters:!0,and:!0,'getters"':!0},"use Quant\\Core\\Trait\\AccessorTrait;\nuse Quant\\Core\\Attribute\\Setter;\nuse Quant\\Core\\Attribute\\Getter;\n\n#[Setter] #[Getter]\nclass Target \n{\n    use AccessorTrait;\n\n    public function __construct(\n         #Setter[Modifier::PRIVATE]  \n         public string $value,\n         private bool $state\n     ) {\n    {\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"#[Getter]")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"#[Setter]")," on property level override class-level attribute configuration."),(0,a.kt)("p",null,"In the example above, ",(0,a.kt)("inlineCode",{parentName:"p"},"setters")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getters")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"$value")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$state")," are available, but ",(0,a.kt)("inlineCode",{parentName:"p"},"setValue()")," is configured\nwith a private access modifier."),(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the target already contains ",(0,a.kt)("inlineCode",{parentName:"li"},"setters")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"getters")," matching the naming conventions used by the ",(0,a.kt)("inlineCode",{parentName:"li"},"AccessorTrait"),",\nhandling of these methods will default to the owning object, and not the ",(0,a.kt)("inlineCode",{parentName:"li"},"AccessorTrait"),". This also applies to\nthe ",(0,a.kt)("a",{parentName:"li",href:"#setters-and-guards"},(0,a.kt)("inlineCode",{parentName:"a"},"applyProperties")),"-method."),(0,a.kt)("li",{parentName:"ul"},"Once the ",(0,a.kt)("inlineCode",{parentName:"li"},"AccessorTrait")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"used"),"  by a class, subclasses of the hosting class inherit the functionality of the ",(0,a.kt)("inlineCode",{parentName:"li"},"AccessorTrait")," and\ndo not need to redeclare the trait with their class-definition to use ",(0,a.kt)("inlineCode",{parentName:"li"},"#[Getter]")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"#[Setter]")," attributes."),(0,a.kt)("li",{parentName:"ul"},"Static Code Analyzis Support is available with ",(0,a.kt)("a",{parentName:"li",href:"/docs/packages/quant/phpstan"},"quant/phpstan"))),(0,a.kt)("h2",{id:"performance-considerations"},"Performance Considerations"),(0,a.kt)("p",null,"The implementation requires logic and information to be evaluated at runtime, since getters / setters are only virtually existing, not physically: This affects performance to a certain degree."),(0,a.kt)("p",null,"In tests, the following functionality of the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccessorTrait")," proved to have an impact on runtime performance:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Using the Reflection API to query properties and classes for properties."),(0,a.kt)("li",{parentName:"ol"},"Deciding whether an callee's accessor is accessible based on the modifier-configuration of the attribute."),(0,a.kt)("li",{parentName:"ol"},"Scoping function calls from the class that hosts the trait to the classes that declare the property. E.g., if the property is declared private, the owning class must be determined and used as the scope when setting the property.")),(0,a.kt)("p",null,"For futher details and benachmarks refer to ",(0,a.kt)("a",{parentName:"p",href:"https://thorsten.suckow-homberg.de/docs/articles/getter-setter-automation-with-php-attributes/#5-performance-considerations"},"this article"),"."),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A writeup and closer look at the ",(0,a.kt)("inlineCode",{parentName:"li"},"AccessorTrait")," can be found at ",(0,a.kt)("a",{parentName:"li",href:"https://thorsten.suckow-homberg.de/docs/articles/getter-setter-automation-with-php-attributes"},"https://thorsten.suckow-homberg.de"))))}d.isMDXComponent=!0}}]);