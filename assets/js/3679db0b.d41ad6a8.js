"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=o(n),d=r,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const l={id:"abstractlist",title:"AbstractList",slug:"/packages/quant/core/abstractlist"},i=void 0,s={unversionedId:"packages/quant/core/abstractlist",id:"packages/quant/core/abstractlist",title:"AbstractList",description:"Reference",source:"@site/docs/packages/quant/core/AbstractList.md",sourceDirName:"packages/quant/core",slug:"/packages/quant/core/abstractlist",permalink:"/docs/packages/quant/core/abstractlist",draft:!1,editUrl:"https://github.com/quant-php/quant.github.io/tree/main/docs/packages/quant/core/AbstractList.md",tags:[],version:"current",lastUpdatedBy:"Thorsten Suckow-Homberg",lastUpdatedAt:1685391022,formattedLastUpdatedAt:"May 29, 2023",frontMatter:{id:"abstractlist",title:"AbstractList",slug:"/packages/quant/core/abstractlist"},sidebar:"docs",previous:{title:"Core",permalink:"/docs/packages/quant/core/"},next:{title:"Arrayable",permalink:"/docs/packages/quant/core/contract/arrayable"}},p={},o=[{value:"Definition",id:"definition",level:2},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Example",id:"example",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Methods",id:"methods",level:2},{value:"compareItems",id:"compareitems",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"equals",id:"equals",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"findType",id:"findtype",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-3",level:4},{value:"map",id:"map",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"make",id:"make",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"peek",id:"peek",level:3},{value:"Returns",id:"returns-6",level:4}],u={toc:o},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Reference"),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("p",null,"Namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"Quant\\Core")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AbstractList<T>")," Represents a strongly typed list with methods for manipulating and searching its items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class AbstractList<T>: \\Quant\\Core\\Contract\\Arrayable, \n                       \\Quant\\Core\\Contract\\Equatable, \n                       \\ArrayAccess<int, T>, \n                       \\Iterator<int, T>, \n                       \\Countable\n")),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"),": The type of the items maintained by the list.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'\n#[Getter] #[Setter]\nclass Entity \n{   \n    use AccessorTrait;\n\n    public function __construct(private string $value)\n    {\n    }\n}\n\nclass EntityList extends AbstractList {\n    \n    public function getType(): string\n    {\n        return Entity::class;\n    }\n    \n    protected function compareItems(mixed $a, mixed $b): bool\n    {\n        if (!($a instanceof Entity) && !($b instanceof Entity)) {\n            return false;\n        }\n        \n        return $a->getValue() === $b->getValue();\n    }\n    \n}\n\n$listA = new EntityList();\n$listA[] = new Entity("1");\n$listA[] = new Entity("1");\n\n$listB = new EntityList();\n$listB[] = new Entity("1");\n$listB[] = new Entity("2");\n\n$listA->equals($listB); // false\n\n$listC = EntityList::make(new Entity("3"), new Entity("4"));\n\n$listC->map(fn(Entity $item): Entity => $item->setValue("1"))->equals($listA); // true\n\n$listB->peek()->getValue(); // "2"\n\n$listC->findBy(fn (Entity $item): bool => $item->getValue() === "a"); //null\n$listC->findBy(fn (Entity $item): bool => $item->getValue() !== "a")->toArray(); //[listC[0], listC[1]]\n')),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Items can be added to the list using the array shorthand syntax ",(0,r.kt)("inlineCode",{parentName:"li"},"$list[] = $item;"),"; If an item is added to the list\nthat is not of type ",(0,r.kt)("inlineCode",{parentName:"li"},"T"),", a ",(0,r.kt)("inlineCode",{parentName:"li"},"TypeError")," is thrown."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#equals"},(0,r.kt)("inlineCode",{parentName:"a"},"equals"))," compares items using ",(0,r.kt)("a",{parentName:"li",href:"#compareitems"},(0,r.kt)("inlineCode",{parentName:"a"},"compareItems"))," iff ",(0,r.kt)("inlineCode",{parentName:"li"},"T")," does not implement ",(0,r.kt)("a",{parentName:"li",href:"/docs/packages/quant/core/contract/equatable"},(0,r.kt)("inlineCode",{parentName:"a"},"Equatable"))," or ",(0,r.kt)("a",{parentName:"li",href:"/docs/packages/quant/core/contract/comparable"},(0,r.kt)("inlineCode",{parentName:"a"},"Comparable"))," ")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"compareitems"},"compareItems"),(0,r.kt)("p",null,"Compares two instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if two items reference the same item."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This method is used by ",(0,r.kt)("a",{parentName:"p",href:"#equals"},"equals")," and should be overriden when custom logic is required and ",(0,r.kt)("inlineCode",{parentName:"p"},"$lft")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"$rgt")," do not not implement ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/quant/core/contract/equatable"},(0,r.kt)("inlineCode",{parentName:"a"},"Equatable"))," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/quant/core/contract/comparable"},(0,r.kt)("inlineCode",{parentName:"a"},"Comparable"))," .")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"    protected function compareItems(T $lft, T $rgt): bool\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T $lft")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T $rgt"))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool"))),(0,r.kt)("h3",{id:"equals"},"equals"),(0,r.kt)("p",null,"Compares two lists for equality. If ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," implements ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/quant/core/contract/equatable"},(0,r.kt)("inlineCode",{parentName:"a"},"Equatable")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"equals"),"-method will be used.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," implements ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/quant/core/contract/comparable"},(0,r.kt)("inlineCode",{parentName:"a"},"Comparable")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"compareTo")," will be used and two items will be considered\n",(0,r.kt)("inlineCode",{parentName:"p"},"equal")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"compareTo")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," for two items. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"compareTo")," will only be called if ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," does not implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Equatable"),"."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," implements neither of the two, ",(0,r.kt)("strong",{parentName:"p"},"this")," list  calls ",(0,r.kt)("a",{parentName:"p",href:"#compareitems"},(0,r.kt)("inlineCode",{parentName:"a"},"compareItems")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function equals(Equatable $target): bool\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Equatable $target"),(0,r.kt)("br",null)," The list ",(0,r.kt)("strong",{parentName:"li"},"this")," list should be compared to.")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if list ",(0,r.kt)("inlineCode",{parentName:"li"},"$target")," is considered to be equal to ",(0,r.kt)("strong",{parentName:"li"},"this")," list")),(0,r.kt)("h3",{id:"findtype"},"findType"),(0,r.kt)("p",null,"Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractList<T>")," with all entries matched by ",(0,r.kt)("inlineCode",{parentName:"p"},"$findFn"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no items where matched."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function findType(callable $findFn): null|AbstractList<T>\n")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callable $findFb"),(0,r.kt)("br",null)," Callback function that takes an instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"T")," as an argument and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"bool"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," indicates a match.")),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractList<T>")," ",(0,r.kt)("br",null)," A new list containing the matched items. ")),(0,r.kt)("h3",{id:"gettype"},"getType"),(0,r.kt)("p",null,"Returns the class name of ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"abstract public function getType(): string\n")),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"))),(0,r.kt)("h3",{id:"map"},"map"),(0,r.kt)("p",null,"Applies the callable to the items of ",(0,r.kt)("strong",{parentName:"p"},"this")," list."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callable $mapFn"),(0,r.kt)("br",null),"A function that takes an instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"T")," as the argument and returns the same instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractList<T>"))),(0,r.kt)("h3",{id:"make"},"make"),(0,r.kt)("p",null,"Factory method for creating instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractList<T>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public static function make(T ...$items): AbstractList<T>\n")),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T ...$items")," ",(0,r.kt)("br",null)," An arbitrary number of arguments each representing an instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractList<T>"))),(0,r.kt)("h3",{id:"peek"},"peek"),(0,r.kt)("p",null,"Returns the element at the head of the ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractList"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the list is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"public function peek(): mixed\n")),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"?<T>")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," if the list is empty, otherwise the element of type ",(0,r.kt)("inlineCode",{parentName:"li"},"<T>")," found at the head of the list.")))}c.isMDXComponent=!0}}]);